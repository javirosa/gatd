#!/usr/bin/env python2
#
# This module converts a text config file to python classes and attributes.
#
# so
#  [mongo]
#  host: inductor.eecs.umich.edu
#
# becomes
#  gatdConfig.mongo.host
#

import argparse
import ConfigParser
import os
import sys


HEADER_FILE = """
#ifndef __GATD_CONFIG_H__
#define __GATD_CONFIG_H__

// THIS FILE AUTOGENERATED BY config_header.py
// DO NOT EDIT

"""

argparser = argparse.ArgumentParser()
argparser.add_argument('-i', '--input',  help='Input file name',
	action='store', required=True)
argparser.add_argument('-o', '--output', help='Output file name',
	action='store', required=True)
args = argparser.parse_args()


config = ConfigParser.ConfigParser()
config.read(args.input)

for section in config.sections():
	attrs = dict(config.items(section))

	# Convert integers to integers
	for attr in attrs:
		try:
			attrs[attr] = int(attrs[attr])
		except ValueError:
			pass

	for k,v in attrs.items():
		var_type = ''
		var_value = ''
		var_name = '{}_{}'.format(section, k)

		if section == 'rabbitmq' and (k[0:2] == 'q_' or k[0:4] == 'xch_'):
			# These need super special formatting
			var_type = 'amqp_bytes_t'
			var_value = '{{{}, "{}"}}'.format(len(v), v)
		else:
			if type(v) == str:
				var_value = '"{}"'.format(v)
				var_type = 'char'
				var_name += '[]'
			elif type(v) == int:
				var_value = '{}'.format(v)
				var_type = 'int'

		line = 'const {vtype} {name} = {value};\n'.format(vtype=var_type,
			name=var_name.upper(), value=var_value);

		HEADER_FILE += line

HEADER_FILE += '#endif'

with open(args.output, 'w') as f:
	f.write(HEADER_FILE)

